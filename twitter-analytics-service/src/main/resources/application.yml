server:
  port: 8188
  servlet:
#    context-path: /twitter-analytics-service     # if requesting via localhost
    context-path: /                               # if requesting via api gateway

spring:
  application:
    name: twitter-analytics-service
  profiles:
    active: analytics
  config:
    import: 'optional:configserver:http://localhost:8888'
  cloud:
    config:
      name: twitter-analytics-service,config-client
      username: spring_cloud_user
#      password: springCloud_Pwd!
      password: '{cipher}7a0d735158a760bab4ffb791ca55f52df9aa3a2b27b8411e968264d7726cc7597ea9ff5a57dae90fd68c9c09ba6a6970'
      allow-override: true
    loadbalancer:
      ribbon:
        enabled: false
  jpa:
    open-in-view: false
    show-sql: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        use_sql_comments: false
        format_sql: true
        jdbc:
          batch_size: 50
        order_inserts: true
        order_updates: true
        default_schema: analytics
    hibernate:
      ddl-auto: none
    defer-datasource-initialization: true
  datasource:
    url: jdbc:postgresql://localhost:5432/twitter-data-analytics
    username: postgres
    password: password
    driver-class-name: org.postgresql.Driver
  sql:
    init:
      mode: always
      schema-locations: classpath:sql/schema.sql

encrypt:
  key: APODNU3093r2rbjzxcn09u213asdhy08WRFH

log:
  app-name: ${spring.application.name}

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html

security:
  paths-to-ignore: /api-docs, /actuator/**, /**

eureka:
  client:
    service-url:
      default-zone: http://localhost:8761/euraka/
  instance:
    lease-expiration-duration-in-seconds: 5
    lease-renewal-interval-in-seconds: 2

management:
  endpoints:
    web:
      base-path: /actuator
      exposure.include: health, prometheus
      path-mapping:
        prometheus: metrics
  endpoint:
    health:
      show-details: always
    prometheus:
      cache.time-to-live: 1ms

#----------------------------------------------------------------------------------------------------------------------
# Uncomment below config properties to build locally. Otherwise, start local config server before building the project.
#----------------------------------------------------------------------------------------------------------------------
#retry-config:
#  initial-interval-ms: 1000
#  max-interval-ms: 10000
#  multiplier: 2.0
#  maxAttempts: 3
#  sleep-time-ms: 2000
#
#kafka-config:
#  bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
#  schema-registry-url-key: schema.registry.url
#  schema-registry-url: http://localhost:8081
#  topic-name: twitter-analytics-topic
#  topic-names-to-create:
#    - twitter-analytics-topic
#
#kafka-consumer-config:
#  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#  value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
#  consumer-group-id: twitter-topic-consumer
#  auto-offset-reset: earliest
#  specific-avro-reader-key: specific.avro.reader
#  specific-avro-reader: true
#  batch-listener: true
#  auto-startup: false
#  concurrency-level: 3
#  session-timeout-ms: 10000
#  heartbeat-interval-ms: 3000
#  max-poll-interval-ms: 300000
#  max-poll-records: 500
#  max-partition-fetch-bytes-default: 1048576
#  max-partition-fetch-bytes-boost-factor: 1
#  poll-timeout-ms: 150

